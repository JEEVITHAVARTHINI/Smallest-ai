openapi: 3.0.3
info:
  title: Smallest AI API
  version: 1.0.0
  description: |
    Welcome to the Smallest AI API documentation. This guide will walk you through everything you need to get started using our endpoints effectively.

    ### Authentication
    All endpoints require an API key passed in the header:
    ```bash
    curl -H "Authorization: Bearer YOUR_API_KEY" https://api.smallest.ai/user/get-user-details
    ```

    #### Key Rotation
    - Rotate keys periodically to reduce risk.
    - Revoke old or compromised keys immediately.
    - Use different keys for different environments (dev, staging, prod).

    ### Error Codes & Troubleshooting
    | Status Code | Meaning           | Troubleshooting Suggestion              |
    |-------------|-------------------|------------------------------------------|
    | 400         | Bad Request       | Check input format or required fields.  |
    | 401         | Unauthorized      | Verify API key is valid and included.   |
    | 404         | Not Found         | Ensure endpoint and path parameters are correct. |
    | 500         | Server Error      | Retry or report to support.             |

    ### SDK Usage
    **Python Example:**
    ```python
    import requests
    headers = {"Authorization": "Bearer YOUR_API_KEY"}
    response = requests.get("https://api.smallest.ai/user/get-user-details", headers=headers)
    print(response.json())
    ```

    **JavaScript Example:**
    ```js
    fetch("https://api.smallest.ai/user/get-user-details", {
      headers: {"Authorization": "Bearer YOUR_API_KEY"}
    }).then(res => res.json()).then(console.log);
    ```

    ### Endpoint Summary
    | Tag             | Summary                           |
    |------------------|------------------------------------|
    | User             | Retrieve and manage user data      |
    | Organization     | Manage organizations               |
    | Agent Templates  | Work with agent templates          |
    | Agents           | Operate and manage agents          |
    | Logs             | Access and filter logs             |
    | Calls            | Retrieve call info and transcripts |
    | Knowledge Base   | Add, update, retrieve knowledge    |

servers:
  - url: https://api.smallest.ai
    description: Production Server

tags:
  - name: User
    description: |
      Retrieve and manage user-related data, including profile info, preferences, and credentials.
      Perform CRUD operations and authentication management for users.
  - name: Organization
    description: |
      Manage organization data, settings, and membership.
      Includes creating, updating, and removing organizations.
  - name: Agent Templates
    description: |
      Templates used to create agents with predefined configurations.
      Manage templates for consistent agent creation.
  - name: Agents
    description: |
      Agent-related endpoints for creating, updating, retrieving, and deleting agents.
      Manage agent lifecycle and operational parameters.
  - name: Logs
    description: |
      Access logs and audit trails to monitor system events.
      Filter, retrieve, and remove logs as needed for compliance.
  - name: Calls
    description: |
      Call-related data and transcripts management.
      Create, update, retrieve, and delete call records.
  - name: Knowledge Base
    description: |
      Upload and retrieve documents for AI knowledge base.
      Perform full CRUD operations on knowledge content.

paths:
  # User endpoints (GET only example)
  /user/get-user-details:
    get:
      tags:
        - User
      summary: Retrieve user info
      description: Get detailed information about a user using their ID.
      operationId: getUserDetails
      parameters:
        - name: user_id
          in: query
          description: ID of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: "123"
                  name:
                    type: string
                    example: "John Doe"
                  email:
                    type: string
                    example: "john@example.com"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Server Error
      security:
        - bearerAuth: []

  # Organization endpoints (GET only example)
  /organization/get-org-details:
    get:
      tags:
        - Organization
      summary: Retrieve organization details
      description: Fetch organization info by ID.
      parameters:
        - name: org_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response

  # Agent Templates endpoints (GET only example)
  /agent-templates/list:
    get:
      tags:
        - Agent Templates
      summary: List agent templates
      description: Retrieve all available agent templates.
      responses:
        '200':
          description: Successful response

  # Agents endpoints (GET + POST + PUT + DELETE)
  /agents/get-agent:
    get:
      tags:
        - Agents
      summary: Retrieve agent details
      description: Get detailed info about a specific agent.
      parameters:
        - name: agent_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
  /agents/create-agent:
    post:
      tags:
        - Agents
      summary: Create a new agent
      description: Create an agent using specified parameters.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - template_id
              properties:
                name:
                  type: string
                template_id:
                  type: string
      responses:
        '201':
          description: Agent created
  /agents/update-agent:
    put:
      tags:
        - Agents
      summary: Update agent details
      description: Update an existing agent's information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - agent_id
              properties:
                agent_id:
                  type: string
                name:
                  type: string
                template_id:
                  type: string
      responses:
        '200':
          description: Agent updated
  /agents/delete-agent:
    delete:
      tags:
        - Agents
      summary: Delete an agent
      description: Remove an agent by ID.
      parameters:
        - name: agent_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Agent deleted

  # Logs endpoints (GET + DELETE)
  /logs/fetch:
    get:
      tags:
        - Logs
      summary: Fetch logs
      description: Access log data with filtering options.
      responses:
        '200':
          description: Successful response
  /logs/delete:
    delete:
      tags:
        - Logs
      summary: Delete a log entry
      description: Delete a log entry by its ID.
      parameters:
        - name: log_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Log deleted

  # Calls endpoints (GET + POST + DELETE)
  /calls/get-call-info:
    get:
      tags:
        - Calls
      summary: Retrieve call information
      description: Get metadata or transcript of a call.
      parameters:
        - name: call_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
  /calls/create-call:
    post:
      tags:
        - Calls
      summary: Create a call record
      description: Create a new call with metadata.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - caller_id
                - callee_id
                - timestamp
              properties:
                caller_id:
                  type: string
                callee_id:
                  type: string
                timestamp:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Call created
  /calls/delete-call:
    delete:
      tags:
        - Calls
      summary: Delete a call record
      description: Delete a call by its ID.
      parameters:
        - name: call_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Call deleted

  # Knowledge Base endpoints (GET + POST + DELETE)
  /knowledge-base/search:
    get:
      tags:
        - Knowledge
